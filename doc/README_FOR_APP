Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.


######## Installation notes #################

Using rvm with ruby 1.9.2
Created a new gemset: cms 
Installed rails 3.1.3 with cucumber-rails and rspec-rails
Generated a new app:
    $ rails new cms -d postgresql -T --old-style-hash
Installed RSpec stuff:
    $ rails g rspec:install --old-style-hash
Installed Cucumber stuff:
    $ rails g cucumber:install --old-style-hash

################ HTML5 ######################

Decided to use rails-boilerplate to get HTML5 Boilerplate
integration. html5-boilerplate is more popular but pushes you to use
HAML which I have never really warmed up to. 

Per the instructions at https://github.com/khelben/rails-boilerplate
I added "gem 'rails-boilerplate'" to my Gemfile and reran bundle
install. Trying to run "rails g boilerplate:install" gave an error
complaining about not having a Javascript runtime:

  gems/execjs-1.2.13/lib/execjs/runtimes.rb:47:in `autodetect': 
  Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs 
  for a list of available runtimes. (ExecJS::RuntimeUnavailable)

Decided to use rubyracer as I had for the Ticket tracker app. Also
added the other gems I was using for those exercises:

  group :assets do
    gem 'sass-rails',   '~> 3.1.5'
    gem 'coffee-rails', '~> 3.1.1'
    gem 'uglifier', '>= 1.0.3'
    # JavaScript executable - Google's V8 as a ruby gem
    gem 'therubyracer'
  end

  gem 'jquery-rails'
  gem 'rails-boilerplate'

  group :test, :development do
    gem 'rspec-rails', '~> 2.5'
  end

  group :test do
    gem 'cucumber-rails'
    gem 'capybara'
    gem 'database_cleaner'
    gem 'shoulda-matchers'
    gem 'factory_girl_rails'
  end

$ rails g boilerplate:install
    conflict  app/views/layouts/application.html.erb
Overwrite /home/cnk/rails/cms/app/views/layouts/application.html.erb? (enter "h" for help) [Ynaqdh] y
       force  app/views/layouts/application.html.erb
      insert  app/assets/stylesheets/application.css
      insert  app/assets/javascripts/application.js
    conflict  public/robots.txt
Overwrite /home/cnk/rails/cms/public/robots.txt? (enter "h" for help) [Ynaqdh] y
       force  public/robots.txt
      create  public/crossdomain.xml
      create  public/humans.txt
    conflict  public/favicon.ico
Overwrite /home/cnk/rails/cms/public/favicon.ico? (enter "h" for help) [Ynaqdh] y
       force  public/favicon.ico
      create  public/apple-touch-icon-114x114-precomposed.png
      create  public/apple-touch-icon-57x57-precomposed.png
      create  public/apple-touch-icon-72x72-precomposed.png
      create  public/apple-touch-icon-precomposed.png
      create  public/apple-touch-icon.png

Got replacement Apple Touch icons for Caltech from Dan - and a link to
information on using them:
http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safariwebcontent/ConfiguringWebApplications/ConfiguringWebApplications.html

Built 2 default stylesheets - one for structural elements and one for
styles that can be used within the WYSIWYG editor too. And edited the
application.css manifest to include both of them explicitly instead of
using require_tree. 

Removed 'require_tree .' from app/assets/javascripts/application.js so
I can include the WYWIWYG editor javascript only on admin pages.


############# Authentication  ###############

Looking at
https://www.ruby-toolbox.com/categories/rails_authentication it seems
that the usual options for authentication are Devise, Authlogic, and
the old faithful, Restful Authentication. Looking at the LDAP
category, there is already an extension for Devise, so let's start
with that. It says you probably can't use it along side devise's
database user storage - but I should be able to adapt that. 

Devise is about to release a backwards incompatible 2.0 version. Since
I don't have anything already in place, I don't see why I shouldn't
just start with the new one and save myself the hassle of upgrading. I
can't figure out Gemfile syntax to have it install devise 2.0.0.rc, so
I just used: "gem install devise --pre" to do it by hand. Then "gem
'devise'" in the Gemfile worked find (e.g. did not try to install
devise 1.5.x). 


$ gem install devise --pre
$ rails g devise:install
  Heeded the advise from the installer:
  1. Set config.action_mailer.default_url_options in dev mode (even
     though I am not planning to use :confirmable
  2. Checked I had a root_url
  3. Added notice and alert paragraphs to my application layout
  4. For now, ignored the advise on config.assets.initialize_on_precompile

$ rails g active_record:devise User --old-style-hash
  Edited user model, migration file, and initializer file. 

  Default options are: :database_authenticatable, :registerable,
          :recoverable, :rememberable, :trackable, :validatable

  My options: :database_authenticatable, :recoverable, :trackable, :validatable
	
  Added a login field to the database migration and set a number of
  configuration options to use it instead of email. 

  Noticed that neither generator added routes to my routes file. Older
  docs say that the devise generator should have added "devise_for
  :users" to the routes file. Wonder if it isn't needed any longer
  because Rails 3.1 has better engine support.

$ rake db:migrate


https://github.com/aanand/fakeldap
